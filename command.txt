python -m venv venv  -- creato ambiente virtuale (isolato dal sistema).
crea:   venv/
        ├── Include/
        ├── Lib/
        ├── Scripts/     <-- qui ci sono gli script per attivare/disattivare
        │    ├── activate
        │    ├── activate.bat
        │    ├── deactivate.bat
        │    └── python.exe
        └── pyvenv.cfg


venv\Scripts\activate 
                        # attiva l’ambiente virtuale:
                         • modifica PATH → usa python/pip dentro venv
                         • imposta variabile VIRTUAL_ENV
                         • cambia il prompt aggiungendo (venv)

pip install -r requirements.txt
                        # ricrea l’ambiente con esattamente le stesse versioni elencate in requirements.txt
# pip 25.2 
# python 3.13

pip list
                        # elenca tutti i pacchetti installati nel venv con relative versioni
pip freeze > requirements.txt   
                        # salva tutte le dipendenze correnti (con versioni precise) dentro requirements.txt
                        # utile per replicare lo stesso ambiente in produzione o su altri pc


pip install "fastapi[standard]"   
                        # Installa FastAPI con tutto il necessario per sviluppo/produzione:
                        # uvicorn (server ASGI) con extras (uvloop, httptools, watchfiles),
                        # python-multipart (upload), jinja2 (template), pyyaml (config), itsdangerous (token)

pip install sqlalchemy[asyncio]   
                        # Installa SQLAlchemy con supporto alla modalità asincrona (AsyncSession, create_async_engine)
pip install asyncpg   
                        # Driver asincrono per PostgreSQL → permette a SQLAlchemy async di collegarsi a Postgres
pip install pydantic-settings   
                        # Gestione della configurazione (settings) da variabili d'ambiente o file .env
pip install python-dotenv   
                        # Permette di caricare automaticamente variabili dal file .env (utile in sviluppo)
pip install alembic   
                        # Sistema di migrazione per il database → versiona e applica modifiche allo schema in modo sicuro
pip install redis   
                        # Client Python per Redis (opzionale ma utile per caching, sessioni, rate limiting)





